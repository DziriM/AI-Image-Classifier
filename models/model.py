import numpy as np
from tensorflow.keras.applications import ResNet50 # type: ignore
from tensorflow.keras.preprocessing import image # type: ignore
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions # type: ignore
from PIL import Image
import logging
import io

# ğŸ”¹ Initialisation des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ğŸ”¹ Chargement du modÃ¨le ResNet50 prÃ©-entraÃ®nÃ© sur ImageNet
logger.info("Chargement du modÃ¨le ResNet50...")
model = ResNet50(weights="imagenet")
logger.info("ModÃ¨le chargÃ© avec succÃ¨s.")

def preprocess_image(image_bytes):
    """
    Convertit une image reÃ§ue en entrÃ©e en un format compatible avec ResNet50.
    
    Args:
        image_bytes (bytes): Image sous forme de bytes.

    Returns:
        np.ndarray: Image prÃ©traitÃ©e prÃªte pour la prÃ©diction.
    """
    try:
        # ğŸ”¹ Ouverture de l'image avec PIL
        img = Image.open(io.BytesIO(image_bytes))

        # ğŸ”¹ VÃ©rification du format d'image
        if img.mode != "RGB":
            img = img.convert("RGB")

        # ğŸ”¹ Redimensionnement Ã  la taille requise (224x224)
        img = img.resize((224, 224))

        # ğŸ”¹ Conversion en tableau NumPy
        img_array = image.img_to_array(img)

        # ğŸ”¹ Ajout de la dimension batch (1, 224, 224, 3)
        img_array = np.expand_dims(img_array, axis=0)

        # ğŸ”¹ PrÃ©traitement selon les exigences de ResNet50
        img_array = preprocess_input(img_array)

        return img_array
    except Exception as e:
        logger.error(f"Erreur lors du prÃ©traitement de l'image : {e}")
        return None

def predict_image(image_bytes):
    """
    Effectue la prÃ©diction sur une image.

    Args:
        image_bytes (bytes): Image en bytes.

    Returns:
        list: Liste des 3 meilleures prÃ©dictions avec leur probabilitÃ©.
    """
    # ğŸ”¹ PrÃ©traitement de l'image
    img_array = preprocess_image(image_bytes)
    if img_array is None:
        return None

    # ğŸ”¹ PrÃ©diction avec le modÃ¨le
    preds = model.predict(img_array)

    # ğŸ”¹ DÃ©codage des rÃ©sultats (top 10 classes les plus probables)
    result = decode_predictions(preds, top=10)[0]

    # ğŸ”¹ Formatage des prÃ©dictions
    predictions = [
        {"label": label, "probability": float(prob)}
        for (_, label, prob) in result
    ]

    return predictions
